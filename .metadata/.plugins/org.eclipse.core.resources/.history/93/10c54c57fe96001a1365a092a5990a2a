/*
 * genericStructure1.c
 *
 *  Created on: 13 May 2020
 *      Author: Carlos
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "IOdata.h"
#include "eCliente.h"

/**
 * \brief Inicializa el isEmpty en un array de eCliente
 * \param estructuraArray es el array que se la pasa para inicializar
 * \param arrayLenght es un int que indica la longitud del array recibido
 * \param value recibe una constante de tipo int
 * \return no devuelve nada.
 *
 */
void seteClienteStatus(eCliente eClienteArray[],int arrayLenght,int value)
{
    int i;
    for(i = 0; i < arrayLenght; i++)
    {
    	eClienteArray[i].isEmpty = value;
    }
}

int findEmptyPlace(eCliente eClienteArray[],int arrayLenght, int value)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayLenght; i++)
    {
    	if(eClienteArray[i].isEmpty == value)
    	{
    		retCode = i;
    	}
    }
    return retCode;
}

int seteCliente(eCliente eClienteArray[], int arrayLenght)
{
	int retCode = -1;
	int index = findEmptyPlace(eClienteArray, QTYCLIENTE,EMPTY);

	if(index == -1)
	{
		showMessage("\nNo hay lugares disponibles.");
	}
	else
	{
		getAlphaString(eClienteArray[index].nombre, "\nIngrese el nombre: ", "\nError. El nombre solo debe contener letras.");
		getAlphaString(eClienteArray[index].apellido, "\nIngrese el apellido: ", "\nError. El apellido solo debe contener letras.");
		getAlphaNumericDni(eClienteArray[index].cuil, "\nIngrese el nuevo DNI: ","\nError.El DNI solo puede contener puntos y numeros! Intente de nuevo: ");
		eClienteArray[index].ideCliente = generateIdeCliente();
		eClienteArray[index].isEmpty = NON_EMPTY;
		showMessage("\nAlta dada con exito!!");
		showeCliente(eClienteArray,index,"NOMBRE", "APELLIDO","CUIL", "ID");
		system("pause");
		retCode = 0;
	}

	return retCode;
}

void showeCliente(eCliente data[], int index, char* fieldTitle1, char* fieldTitle2, char* fieldTitle3,char* fieldTitle4)
{
	char pipe =' ';

	printf("****************************************|\n");
	printf("%-40s|\n", fieldTitle1);
	printf("%-40c|\n", pipe);
	printf("%-40s|\n", data[index].nombre);
	printf("****************************************|\n");
	printf("%-40s|\n", fieldTitle2);
	printf("%-40c|\n", pipe);
	printf("%-40s|\n", data[index].apellido);
	printf("****************************************|\n");
	printf("%-40s|\n", fieldTitle3);
	printf("%-40c|\n", pipe);
	printf("%-40s|\n", data[index].cuil);
	printf("****************************************|\n");
	printf("%-40s|\n", fieldTitle4);
	printf("%-40c|\n", pipe);
	printf("%-40d|\n", data[index].ideCliente);
	printf("****************************************|\n");


}

/** \brief genera un id incremental desde el numero 1.
 *
 * \return int el id incrementado.
 *
 */
int generateIdeCliente()
{
    static int id=1;

    return id++;
}

/**
 * \brief Busca la primera ocurrencia mediante su id
 * \param eClienteArray Es el array en el cual buscar
 * \param arrayLenght Indica la logitud del array
 * \param id Es el valor unico de tipo int que identifica al miembro
 * \return -1 si no encontró y la posición en el array se encontró (i)
 *
 */
int findeClienteById(eCliente eClienteArray[],int arrayLenght, int id)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayLenght; i++)
    {
        if(eClienteArray[i].ideCliente == id && eClienteArray[i].isEmpty == NON_EMPTY)
        {
        	retCode = i;
        }
    }
    return retCode;
}


int modifyeCliente(eCliente eClienteArray[], int arraylength)
{
	int retCode = -1;
	int index;
	int option;
	int id;
	int members;
	char subMenu[] =
				"\n\n1 MODIFICAR NOMBRE\
				 \n\n2 MODIFICAR APELLIDO\
				 \n\n3 MODIFICAR CUIL\
				 \n\n4 SALIR\
				 \n\n Ingrese una opcion: ";
	char mensajeError[] = "Error. Debe ingresar un opcion valida";
	members = showListeCliente(eClienteArray,arraylength,"NOMBRE", "APELLIDO","CUIL", "ID");

	if(members == -1)
	{
		showMessage("No hay miembros para modificar");
		system("pause");
	}else
	{

	getNaturalNumber(&id,"Ingrese el id a modificar: ","Error. El Id solo puede ser numerico",3);
	index = findeClienteById(eClienteArray,arraylength,id);

	while(index == -1)
	{
		showMessage("Debe ingresar ID valido. Intente nuevamente: ");
		showListeCliente(eClienteArray,arraylength,"NOMBRE", "APELLIDO","CUIL", "ID");
		getNaturalNumber(&id,"Ingrese el id a modificar: ","Error. El Id solo puede ser numerico",3);
		index = findeClienteById(eClienteArray,arraylength,id);
	}

	showeCliente(eClienteArray,index,"NOMBRE A MODIFICAR", "APELLIDO A MODIFICAR","CUIL A MODIFICAR", "ID");

	while(option != 4)
	{
	getValidOption(&option, subMenu,mensajeError,1,4,3);
		switch(option)
		{
		case 1:
			getAlphaString(eClienteArray[index].nombre, "\nIngrese el nuevo nombre: ", "\nError. El nombre solo debe contener letras.");
			showMessage("\n Los nuevos datos son: ");
			showeCliente(eClienteArray,index,"NOMBRE", "APELLIDO","CUIL", "ID");
			fflush(stdin);
			system("pause");
		break;
		case 2:
			getAlphaString(eClienteArray[index].apellido, "\nIngrese el nuevo apellido: ", "\nError. El apellido solo debe contener letras.");
			showMessage("\n Los nuevos datos son: ");
			showeCliente(eClienteArray,index,"NOMBRE", "APELLIDO","CUIL", "ID");
			fflush(stdin);
			system("pause");
		break;
		case 3:
			getAlphaNumericDni(eClienteArray[index].cuil, "\nIngrese el nuevo DNI: ","\nError.El DNI solo puede contener puntos y numeros! Intente de nuevo: ");
			showMessage("\n Los nuevos datos son: ");
			showeCliente(eClienteArray,index,"NOMBRE", "APELLIDO","CUIL", "ID");
			fflush(stdin);
			system("pause");
		break;
		case 4:
			break;
		}
	}

	}

	return retCode;
}

int showListeCliente(eCliente data[], int arraylength, char* fieldTitle1, char* fieldTitle2, char* fieldTitle3,char* fieldTitle4)
{
	int retCode = -1;
	int i;
	int emptyPlaces = 0;

	for(i=0;i<arraylength;i++)
	{
		if(data[i].isEmpty==EMPTY)
		{
			emptyPlaces ++;
			continue;
		}
		else
		{
		printf("%-20s|", fieldTitle1);
		printf("%-40s|", data[i].nombre);
		printf("%-20s|", fieldTitle2);
		printf("%-40s|", data[i].apellido);
		printf("%-10s|", fieldTitle3);
		printf("%-10s|", data[i].cuil);
		printf("%-5s|", fieldTitle4);
		printf("%-5d|", data[i].ideCliente);
		printf("\n");
		}
	}

	if(emptyPlaces < arraylength)
	{
		retCode = 0;
	}


	return retCode;
}

int deleteMembereCliente(eCliente eClienteArray[], int arraylength)
{
	int retCode = -1;
	int id;
	int index;
	int members;
	char confirmation;

	members = showListeCliente(eClienteArray,arraylength,"NOMBRE", "APELLIDO","CUIL", "ID");
	if(members == -1)
	{
		showMessage("No hay miembros para cargados aun");
		system("pause");
	}else
	{
	getNaturalNumber(&id,"Ingrese el id que quiere dar de baja: ","Error. El Id solo puede ser numerico",3);
	index = findeClienteById(eClienteArray,arraylength,id);

	while(index == -1)
		{
			showMessage("Debe ingresar ID valido. Intente nuevamente: ");
			showListeCliente(eClienteArray,arraylength,"NOMBRE", "APELLIDO","CUIL", "ID");
			getNaturalNumber(&id,"\nIngrese el id que quiere dar de baja: ","\nError. El Id solo puede ser numerico",3);
			index = findeClienteById(eClienteArray,arraylength,id);
		}
	system("cls");
	showMessage("MIEMBRO A SER DADO DE BAJA\n");
	showeCliente(eClienteArray,index,"NOMBRE", "APELLIDO","CUIL", "ID");
	confirmation = getConfirmationeCliente("Ingrese 's' para confirmar la baja o 'n' para cancelar: ");
	system("pause");
	if(confirmation == 's')
	{
	deleteeClienteById(eClienteArray,arraylength,id);
	}


	}
	return retCode;
}

int deleteeClienteById(eCliente eClienteArray[],int arrayLenght, int id)
{
    int i;
    int retCode = -1;

    for(i = 0; i < arrayLenght; i++)
    {
        if(eClienteArray[i].ideCliente == id && eClienteArray[i].isEmpty == NON_EMPTY)
        {
        	eClienteArray[i].isEmpty = EMPTY;

        	retCode = 0;
        }
    }
    return retCode;
}

char getConfirmationeCliente(char* message)
{
	char retA = 'n';

    do {
        printf("%s", message);
        fflush(stdin);
        scanf("%c", &retA);
        retA = tolower(retA);

    } while (retA != 's' && retA != 'n');

	return retA;
}

int findeClienteByText(eCliente eClienteArray[],int arrayLenght, char* text)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayLenght; i++)
    {
        if((stricmp(eClienteArray[i].nombre,text)==0) && eClienteArray[i].isEmpty == NON_EMPTY)
        {	printf("\nESTOY COMPARANDO CON ESTO: %s", eClienteArray[i].nombre);
        	retCode = eClienteArray[i].ideCliente;
        }
    }
    return retCode;
}


int sorteClienteByTextField(eCliente eClienteArray[],int arrayLength)
{
	int retCode = -1;
	int i;
	int flaggSort;
	char bufferApellido[64];
	char bufferNombre[64];
	char bufferDni[64];
	int bufferIdeCliente;
	int bufferIsEmpty;
	int flexLimit;

	  if(eClienteArray!=NULL && arrayLength >= 0)
	  {	flexLimit = arrayLength -1;
	  	  do
	  	  {
	  		flaggSort = 0;

	  		for (i = 0; i < flexLimit;  i++)
			  {
				  if(strcmp(eClienteArray[i].apellido,eClienteArray[i+1].apellido)>0)
				  {
					  flaggSort = 1;

					  strcpy(bufferApellido,eClienteArray[i].apellido);
					  strcpy(bufferNombre,eClienteArray[i].nombre);
					  strcpy(bufferDni,eClienteArray[i].cuil);
					  bufferIdeCliente = eClienteArray[i].ideCliente;
					  bufferIsEmpty = eClienteArray[i].isEmpty;


					  strcpy(eClienteArray[i].apellido,eClienteArray[i+1].apellido);
					  strcpy(eClienteArray[i].nombre,eClienteArray[i+1].nombre);
					  strcpy(eClienteArray[i].cuil,eClienteArray[i+1].cuil);
					  eClienteArray[i].ideCliente = eClienteArray[i+1].ideCliente;
					  eClienteArray[i].isEmpty = eClienteArray[i+1].isEmpty;

					  strcpy(eClienteArray[i + 1].apellido,bufferApellido);
					  strcpy(eClienteArray[i + 1].nombre,bufferNombre);
					  strcpy(eClienteArray[i + 1].cuil,bufferDni);
					  eClienteArray[i + 1].ideCliente = bufferIdeCliente;
					  eClienteArray[i + 1].isEmpty = bufferIsEmpty;
				  }
			  }
	  		flexLimit--;

	  	  }while(flaggSort);
	  	  retCode = 0;
	  }

	  return  retCode;
}

int checkIfEmptyeCliente(eCliente eClienteArray[],int arrayLenght)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayLenght; i++)
    {
    	if(eClienteArray[i].isEmpty == NON_EMPTY)
    	{
    		retCode = 1;
    	}
    }
    return retCode;
}
