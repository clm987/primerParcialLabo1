/*
 * genericStructure2.c
 *
 *  Created on: 13 May 2020
 *      Author: Carlos
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "IOdata.h"
#include "ePrestamo.h"
#include "eCliente.h"

void setePrestamoStatus(ePrestamo* ePrestamoArray, int arrayPLength, int value)
{
	int i;
	for(i=0; i<arrayPLength; i++)
	{
		ePrestamoArray[i].isEmpty = value;
	}
}


int findEmptyPlaceePrestamo(ePrestamo* ePrestamoArray,int arrayPLength, int value)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayPLength; i++)
    {
    	if(ePrestamoArray[i].isEmpty == value)
    	{
    		retCode = i;
    	}
    }
    return retCode;
}


int generateIdePrestamo()
{
    static int id=1;

    return id++;
}

int findePrestamoById(ePrestamo* ePrestamoArray,int arrayPLength, int id)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayPLength; i++)
    {
        if(ePrestamoArray[i].idPrestamo == id && ePrestamoArray[i].isEmpty == NON_EMPTY)
        {
        	retCode = i;
        }
    }
    return retCode;
}

/*
int findeClienteByIdPrestamo(ePrestamo* ePrestamoArray,int arrayPLength, int id)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayPLength; i++)
    {
        if(ePrestamoArray[i].idCliente == id && ePrestamoArray[i].isEmpty == NON_EMPTY)
        {
        	retCode = i;
        }
    }
    return retCode;
}

int findePrestamoByIdExterno(ePrestamo ePrestamoArray[],int arrayLenght, int id)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayLenght; i++)
    {
        if(ePrestamoArray[i].idExterno == id && ePrestamoArray[i].isEmpty == NON_EMPTY)
        {
        	retCode = i;
        }
    }
    return retCode;
}*/


int showListePrestamo(ePrestamo* ePrestamoArray, int arrayPLength, char* fieldTitle1, char* fieldTitle2, char* fieldTitle3,char* fieldTitle4)
{
	int retCode = -1;
	int i;
	int emptyPlaces = 0;

	for(i=0;i<arrayPLength;i++)
	{
		if(ePrestamoArray[i].isEmpty==EMPTY)
		{
			emptyPlaces ++;
			continue;
		}
		else
		{
		printf("%-20s|", fieldTitle1);
		printf("%-40f|", ePrestamoArray[i].importe);
		printf("%-20s|", fieldTitle2);
		printf("%-40d|", ePrestamoArray[i].cuotas);
		printf("%-10s|", fieldTitle3);
		printf("%-10d|", ePrestamoArray[i].estado);
		printf("%-5s|", fieldTitle4);
		printf("%-5d|", ePrestamoArray[i].idPrestamo);
		printf("\n");
		}
	}

	if(emptyPlaces < arrayPLength)
	{
		retCode = 0;
	}

	return retCode;
}
/*
int deleteMemberePrestamo(ePrestamo ePrestamoArray[], int arraylength)
{
	int retCode = -1;
	int id;
	int index;
	int members;
	char confirmation;

	members = showListePrestamo(ePrestamoArray,arraylength,"IMPORTE", "CUOTAS","EDAD", "ID");
	if(members == -1)
	{
		showMessage("No hay miembros para cargados aun");
		system("pause");
	}else
	{
	getNaturalNumber(&id,"Ingrese el id que quiere dar de baja: ","Error. El Id solo puede ser numerico",3);
	index = findePrestamoById(ePrestamoArray,arraylength,id);

	while(index == -1)
		{
			showMessage("Debe ingresar ID valido. Intente nuevamente: ");
			showListePrestamo(ePrestamoArray,arraylength,"IMPORTE", "CUOTAS","EDAD", "ID");
			getNaturalNumber(&id,"\nIngrese el id que quiere dar de baja: ","\nError. El Id solo puede ser numerico",3);
			index = findePrestamoById(ePrestamoArray,arraylength,id);
		}
	system("cls");
	showMessage("MIEMBRO A SER DADO DE BAJA\n");
	showePrestamo(ePrestamoArray,index,"IMPORTE", "CUOTAS","EDAD", "ID");
	confirmation = getConfirmationePrestamo("Ingrese 's' para confirmar la baja o 'n' para cancelar");
	system("pause");
	if(confirmation == 's')
	{
	deleteePrestamoById(ePrestamoArray,arraylength,id);
	}


	}
	return retCode;
}

int deleteePrestamoById(ePrestamo ePrestamoArray[],int arrayLenght, int id)
{
    int i;
    int retCode = -1;

    for(i = 0; i < arrayLenght; i++)
    {
        if(ePrestamoArray[i].idPrestamo == id && ePrestamoArray[i].isEmpty == NON_EMPTY)
        {
        	ePrestamoArray[i].isEmpty = EMPTY;

        	retCode = 0;
        }
    }
    return retCode;
}*/

char getConfirmationePrestamo(char* message)
{
	char retA = 'n';

    do {
        printf("%s", message);
        fflush(stdin);
        scanf("%c", &retA);
        retA = tolower(retA);

    } while (retA != 's' && retA != 'n');

	return retA;
}
/*
int findePrestamoByText(ePrestamo ePrestamoArray[],int arrayLenght, char* text)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayLenght; i++)
    {
        if((stricmp(ePrestamoArray[i].importe,text)==0) && ePrestamoArray[i].isEmpty == NON_EMPTY)
        {	printf("\nESTOY COMPARANDO CON ESTO: %s", ePrestamoArray[i].importe);
        	retCode = ePrestamoArray[i].idPrestamo;
        }
    }
    return retCode;
}


int sortePrestamoByTextField(ePrestamo ePrestamoArray[],int arrayLength)
{
	int retCode = -1;
	int i;
	int flaggSort;
	char bufferApellido[64];
	char bufferNombre[64];
	char bufferEdad;
	int bufferIdePrestamo;
	int bufferIsEmpty;
	int flexLimit;

	  if(ePrestamoArray!=NULL && arrayLength >= 0)
	  {	flexLimit = arrayLength -1;
	  	  do
	  	  {
	  		flaggSort = 0;

	  		for (i = 0; i < flexLimit;  i++)
			  {
				  if(strcmp(ePrestamoArray[i].cuotas,ePrestamoArray[i+1].cuotas)>0)
				  {
					  flaggSort = 1;

					  strcpy(bufferApellido,ePrestamoArray[i].cuotas);
					  strcpy(bufferNombre,ePrestamoArray[i].importe);
					  bufferEdad = ePrestamoArray[i].edad;
					  bufferIdePrestamo = ePrestamoArray[i].idPrestamo;
					  bufferIsEmpty = ePrestamoArray[i].isEmpty;


					  strcpy(ePrestamoArray[i].cuotas,ePrestamoArray[i+1].cuotas);
					  strcpy(ePrestamoArray[i].importe,ePrestamoArray[i+1].importe);
					  ePrestamoArray[i].edad = ePrestamoArray[i+1].edad;
					  ePrestamoArray[i].idPrestamo = ePrestamoArray[i+1].idPrestamo;
					  ePrestamoArray[i].isEmpty = ePrestamoArray[i+1].isEmpty;

					  strcpy(ePrestamoArray[i + 1].cuotas,bufferApellido);
					  strcpy(ePrestamoArray[i + 1].importe,bufferNombre);
					  ePrestamoArray[i + 1].edad = bufferEdad;
					  ePrestamoArray[i + 1].idPrestamo = bufferIdePrestamo;
					  ePrestamoArray[i + 1].isEmpty = bufferIsEmpty;
				  }
			  }
	  		flexLimit--;

	  	  }while(flaggSort);
	  	  retCode = 0;
	  }

	  return  retCode;
}

int checkIfEmptyePrestamo(ePrestamo ePrestamoArray[],int arrayLength)
{
    int i;
    int retCode = -1;
    for(i = 0; i < arrayLength; i++)
    {
    	if(ePrestamoArray[i].isEmpty == NON_EMPTY)
    	{
    		retCode = 1;
    	}
    }
    return retCode;
}

int findMaxNumber(ePrestamo ePrestamoArray[],int arrayLength)
{
	int retCode = -1;
	int id;
	int i;
	int max = 0;

			for(i=0; i<3; i++)
			{printf("entro en el for\n");

				if(i == 0)
				{printf("Entro al IF\n");

				printf("en el if edad en estructura es %d\n", ePrestamoArray[i].edad);
				printf("en el if id en estructura es : %d\n", ePrestamoArray[i].idPrestamo);

					max = ePrestamoArray[i].edad;
					id = ePrestamoArray[i].idPrestamo;
					printf("en el if max %d\n", max);
					printf("en el if id %d\n", id);

				}else if(ePrestamoArray[i].edad > max && ePrestamoArray[i].isEmpty == NON_EMPTY)
				{printf("Entro al Else-IF\n");
					max = ePrestamoArray[i].edad;
					id = ePrestamoArray[i].idPrestamo;
					retCode = id;
				}
				printf("en el for max %d\n", max);
				printf("en el for id %d\n", id);
			}

	printf("al salir max %d\n", max);
	printf("al salir id %d\n", id);
	system("pause");
	return retCode;
}*/

void setePrestamoEstado(ePrestamo* ePrestamoArray, int arrayPLength, int value)
{
	int i;
	for(i=0; i<arrayPLength; i++)
	{
		ePrestamoArray[i].estado = value;
	}
}



